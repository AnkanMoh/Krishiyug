# -*- coding: utf-8 -*-
"""KrishYug.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1DYkmI1M-_mlq2G7FMAZxCrrv7g4G5RZg
"""

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, classification_report
from flask import Flask, request, jsonify
import joblib

file_path = 'C:/Users/Ankan/OneDrive/Desktop/extended_crop_dataset.csv'
data = pd.read_csv(file_path)

print("Dataset Overview:\n", data.head())
print("Dataset Information:\n")
data.info()

features = [
    "Moisture_Requirement_Percent",
    "Temperature_Celsius",
    "Nitrogen_Content_kg_per_hectare",
    "Phosphorus_Content_kg_per_hectare",
    "Potassium_Content_kg_per_hectare",
    "Soil_pH",
    "Rainfall_mm",
    "IR_Radiation_W_m2",
    "NDVI",
    "Chlorophyll_Content_mg_cm2"
]
X = data[features]
y = data["Crop_Failure_Risk"]

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

model = RandomForestClassifier(random_state=42)
model.fit(X_train, y_train)

y_pred = model.predict(X_test)
print("Accuracy:", accuracy_score(y_test, y_pred))
print("Classification Report:\n", classification_report(y_test, y_pred))

joblib.dump(model, "crop_model.pkl")
print("Model saved as 'crop_model.pkl'")

def recommend_seeds(crop_type, moisture, temperature, soil_pH):
    if crop_type == "Wheat" and moisture < 30:
        return ["Barley", "Millet"]
    elif crop_type == "Pulses" and soil_pH < 6.5:
        return ["Soybean", "Chickpea"]
    elif crop_type == "Sugarcane" and temperature > 35:
        return ["Sorghum", "Maize"]
    else:
        return ["No alternative needed"]

app = Flask(__name__)

@app.route("/predict", methods=["POST"])
def predict():
    data = request.get_json()
    try:
        features = [
            data["Moisture_Requirement_Percent"],
            data["Temperature_Celsius"],
            data["Nitrogen_Content_kg_per_hectare"],
            data["Phosphorus_Content_kg_per_hectare"],
            data["Potassium_Content_kg_per_hectare"],
            data["Soil_pH"],
            data["Rainfall_mm"],
            data["IR_Radiation_W_m2"],
            data["NDVI"],
            data["Chlorophyll_Content_mg_cm2"]
        ]
        prediction = model.predict([features])
        crop_type = data.get("Crop_Type", "Unknown")
        moisture = data["Moisture_Requirement_Percent"]
        temperature = data["Temperature_Celsius"]
        soil_pH = data["Soil_pH"]
        recommendations = recommend_seeds(crop_type, moisture, temperature, soil_pH)
        return jsonify({
            "Predicted_Failure_Risk": int(prediction[0]),
            "Seed_Recommendations": recommendations
        })
    except KeyError as e:
        return jsonify({"error": f"Missing required field: {str(e)}"}), 400
    except Exception as e:
        return jsonify({"error": str(e)}), 500

new_input = {
    "Crop_Type": "Wheat",
    "Moisture_Requirement_Percent": 25,
    "Temperature_Celsius": 22,
    "Soil_pH": 6.0
}

alternatives = recommend_seeds(
    crop_type=new_input["Crop_Type"],
    moisture=new_input["Moisture_Requirement_Percent"],
    temperature=new_input["Temperature_Celsius"],
    soil_pH=new_input["Soil_pH"]
)

print("Recommended Alternative Seeds:", alternatives)

output_file = "crop_data_with_predictions.csv"
data["Predicted_Failure_Risk"] = model.predict(X)
data.to_csv(output_file, index=False)
print(f"Dataset with predictions saved as '{output_file}' for Power BI.")

if __name__ == "__main__":
    app.run(debug=True)